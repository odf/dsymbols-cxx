# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dsymbol', [dirname(__file__)])
        except ImportError:
            import _dsymbol
            return _dsymbol
        if fp is not None:
            try:
                _mod = imp.load_module('_dsymbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dsymbol = swig_import_helper()
    del swig_import_helper
else:
    import _dsymbol
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GenericDSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericDSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericDSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def dim(self): return _dsymbol.GenericDSymbol_dim(self)
    def size(self): return _dsymbol.GenericDSymbol_size(self)
    def is_finite(self): return _dsymbol.GenericDSymbol_is_finite(self)
    def idx_valid(self, *args): return _dsymbol.GenericDSymbol_idx_valid(self, *args)
    def idx_first(self): return _dsymbol.GenericDSymbol_idx_first(self)
    def idx_none(self): return _dsymbol.GenericDSymbol_idx_none(self)
    def idx_next(self, *args): return _dsymbol.GenericDSymbol_idx_next(self, *args)
    def elm_valid(self, *args): return _dsymbol.GenericDSymbol_elm_valid(self, *args)
    def elm_first(self): return _dsymbol.GenericDSymbol_elm_first(self)
    def elm_none(self): return _dsymbol.GenericDSymbol_elm_none(self)
    def elm_next(self, *args): return _dsymbol.GenericDSymbol_elm_next(self, *args)
    def op_defined(self, *args): return _dsymbol.GenericDSymbol_op_defined(self, *args)
    def op(self, *args): return _dsymbol.GenericDSymbol_op(self, *args)
    def v_defined(self, *args): return _dsymbol.GenericDSymbol_v_defined(self, *args)
    def v(self, *args): return _dsymbol.GenericDSymbol_v(self, *args)
    def v_implied(self, *args): return _dsymbol.GenericDSymbol_v_implied(self, *args)
    def r(self, *args): return _dsymbol.GenericDSymbol_r(self, *args)
    def m(self, *args): return _dsymbol.GenericDSymbol_m(self, *args)
    def is_complete(self): return _dsymbol.GenericDSymbol_is_complete(self)
    def is_proper(self): return _dsymbol.GenericDSymbol_is_proper(self)
    def is_loopless(self): return _dsymbol.GenericDSymbol_is_loopless(self)
    def is_simple(self): return _dsymbol.GenericDSymbol_is_simple(self)
    def is_connected(self): return _dsymbol.GenericDSymbol_is_connected(self)
    def is_weakly_oriented(self): return _dsymbol.GenericDSymbol_is_weakly_oriented(self)
    def is_oriented(self): return _dsymbol.GenericDSymbol_is_oriented(self)
    def __str__(self): return _dsymbol.GenericDSymbol___str__(self)
    __swig_destroy__ = _dsymbol.delete_GenericDSymbol
    __del__ = lambda self : None;
GenericDSymbol_swigregister = _dsymbol.GenericDSymbol_swigregister
GenericDSymbol_swigregister(GenericDSymbol)

class DSymbol(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSymbol_dim(self)
    def unset_op(self, *args): return _dsymbol.DSymbol_unset_op(self, *args)
    def set_op(self, *args): return _dsymbol.DSymbol_set_op(self, *args)
    def unset_v(self, *args): return _dsymbol.DSymbol_unset_v(self, *args)
    def set_v(self, *args): return _dsymbol.DSymbol_set_v(self, *args)
    def add_element(self, *args): return _dsymbol.DSymbol_add_element(self, *args)
    def remove_element(self, *args): return _dsymbol.DSymbol_remove_element(self, *args)
    def clone(self): return _dsymbol.DSymbol_clone(self)
    __swig_destroy__ = _dsymbol.delete_DSymbol
    __del__ = lambda self : None;
DSymbol_swigregister = _dsymbol.DSymbol_swigregister
DSymbol_swigregister(DSymbol)

class DualDSymbol(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualDSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DualDSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DualDSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DualDSymbol_dim(self)
    __swig_destroy__ = _dsymbol.delete_DualDSymbol
    __del__ = lambda self : None;
DualDSymbol_swigregister = _dsymbol.DualDSymbol_swigregister
DualDSymbol_swigregister(DualDSymbol)

class SectionDSymbol(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionDSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SectionDSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_SectionDSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.SectionDSymbol_dim(self)
    __swig_destroy__ = _dsymbol.delete_SectionDSymbol
    __del__ = lambda self : None;
SectionDSymbol_swigregister = _dsymbol.SectionDSymbol_swigregister
SectionDSymbol_swigregister(SectionDSymbol)

class DSubsymbol(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSubsymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSubsymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSubsymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSubsymbol_dim(self)
    __swig_destroy__ = _dsymbol.delete_DSubsymbol
    __del__ = lambda self : None;
DSubsymbol_swigregister = _dsymbol.DSubsymbol_swigregister
DSubsymbol_swigregister(DSubsymbol)

class DSymbolBFS(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSymbolBFS, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSymbolBFS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSymbolBFS(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSymbolBFS_dim(self)
    def idx_back_edge(self, *args): return _dsymbol.DSymbolBFS_idx_back_edge(self, *args)
    __swig_destroy__ = _dsymbol.delete_DSymbolBFS
    __del__ = lambda self : None;
DSymbolBFS_swigregister = _dsymbol.DSymbolBFS_swigregister
DSymbolBFS_swigregister(DSymbolBFS)

class DSymbolDFS(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSymbolDFS, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSymbolDFS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSymbolDFS(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSymbolDFS_dim(self)
    def idx_back_edge(self, *args): return _dsymbol.DSymbolDFS_idx_back_edge(self, *args)
    __swig_destroy__ = _dsymbol.delete_DSymbolDFS
    __del__ = lambda self : None;
DSymbolDFS_swigregister = _dsymbol.DSymbolDFS_swigregister
DSymbolDFS_swigregister(DSymbolDFS)

class DSymbolEPS(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSymbolEPS, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSymbolEPS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSymbolEPS(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSymbolEPS_dim(self)
    def idx_back_edge(self, *args): return _dsymbol.DSymbolEPS_idx_back_edge(self, *args)
    __swig_destroy__ = _dsymbol.delete_DSymbolEPS
    __del__ = lambda self : None;
DSymbolEPS_swigregister = _dsymbol.DSymbolEPS_swigregister
DSymbolEPS_swigregister(DSymbolEPS)

class DSymbolIPS(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSymbolIPS, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DSymbolIPS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_DSymbolIPS(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.DSymbolIPS_dim(self)
    def idx_back_edge(self, *args): return _dsymbol.DSymbolIPS_idx_back_edge(self, *args)
    __swig_destroy__ = _dsymbol.delete_DSymbolIPS
    __del__ = lambda self : None;
DSymbolIPS_swigregister = _dsymbol.DSymbolIPS_swigregister
DSymbolIPS_swigregister(DSymbolIPS)

class BinCoverDSymbol(GenericDSymbol):
    __swig_setmethods__ = {}
    for _s in [GenericDSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinCoverDSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericDSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinCoverDSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dsymbol.new_BinCoverDSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _dsymbol.BinCoverDSymbol_dim(self)
    __swig_destroy__ = _dsymbol.delete_BinCoverDSymbol
    __del__ = lambda self : None;
BinCoverDSymbol_swigregister = _dsymbol.BinCoverDSymbol_swigregister
BinCoverDSymbol_swigregister(BinCoverDSymbol)


def simple_ds(*args):
  return _dsymbol.simple_ds(*args)
simple_ds = _dsymbol.simple_ds

def RepresentativesComponents(*args):
  return _dsymbol.RepresentativesComponents(*args)
RepresentativesComponents = _dsymbol.RepresentativesComponents


